剪绳子算法

问题：
一根长度为N的绳子，把绳子剪成M段，（M、N都是整数）
m>1&n>1；每个绳子长度记为k[0]...k[m]
问k[0]*k[1]*...*k[m]的乘积最大为多少
例子：N=8则为2、3、3 =18


解决思路：
1、动态规划
    a.自顶而下动态规划 f(n)=max(f(i)*f(n-i))

    b.自下而上动态规划 利用dp数组，保存从下而上计算的值，避免大量重复计算.
        主要参数：起始参数、j*(i-j)与(i-j)*j是等价的，意味着二层循环只需要i/2。
        dp[0]-dp[3]的含义

2、贪婪法
    寻找局部最优解，并且该最优不会影响到后面的结果，就是贪心地每次都想要获得最好的。
    通常，该最优解的找法是通过罗列部分例子，找出其中的规律，并加以证明。
    本题中的贪婪算法，主要是获得2、3，比如5拆成23  6拆成33，3*3>2*2*2因此，尽可能全部是3


3、特征值法
    a.通过分析问题，可以发现，里面的所有数值最后都可以拆分成2与3，比如5=2+3 2*3=6 1*4=4 其实就是利用了数学中的
    矩形在周长相等的情况下，两边长度越接近，面积越大。用抛物线证明。

个人问题：
    1、理解好动态规划，以及动态规划的起步、优化
    2、贪婪算法
时间：2019/9/23