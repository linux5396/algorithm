判断一个序列是否是二叉搜索树的后序序列算法

问题：
判断一个序列是否是二叉搜索树的后序序列


解决思路：
1、找出特点，二叉搜索树的后序遍历的最后节点是root节点。
2、根据root节点，可以把数组分为两边，左边比root小，右边比root大。
3、如果右边比root小，那么则false.如果左边比root大，那么还可以看成是右边节点。
4、递归判断，直到判断完毕。

个人问题：
1、递归终结条件
2、special case的准备命中

问题：
输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
(注意: 在返回值的list中，数组长度大的数组靠前)
输入：二叉树的根节点和一个targetVal.
输出：打印和为targetVal的paths.(可能有多条，也可能一条都不存在)

解决思路：
1、路径分析，由于是从根节点开始，所以必须是前序遍历。
2、递归遍历，向上回溯记得移除路径中记录的当前节点。

时间：2019/10/22